axis.title.x=element_text(family="Times", face="bold", size=12),
axis.title.y=element_text(family="Times", face="bold", size=12)) +
xlab("Month") +
ylab("Amount Sold (by Month)") +
theme(legend.position = "none") +
ggtitle("Sales of Beverages (by Month of the Year)")
avg.month.temp <- aggregate(tempmed ~ month, df, mean)
ggplot(avg.month.temp, aes(x=month, y=tempmed, group =1, color = "red")) +
geom_line() +
theme(legend.title=element_text(family="Times",size=20),
legend.text=element_text(family="Times",face ="italic",size=15),
plot.title=element_text(family="Times", face="bold", size=20),
axis.title.x=element_text(family="Times", face="bold", size=12),
axis.title.y=element_text(family="Times", face="bold", size=12)) +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Seems like beverage and temperature has a strong correlation which makes perfect sense
#Plotting boxplots for sfiha/month
ggplot(df , aes(factor(month), sfiha)) +
geom_boxplot(aes(fill =factor(month))) +
theme(legend.title=element_text(family="Times",size=20),
legend.text=element_text(family="Times",face ="italic",size=15),
plot.title=element_text(family="Times", face="bold", size=20),
axis.title.x=element_text(family="Times", face="bold", size=12),
axis.title.y=element_text(family="Times", face="bold", size=12)) +
xlab("Month") +
ylab("Amount Sold (by Month)") +
theme(legend.position = "none") +
ggtitle("Sales of Sfiha (by Month of the Year)")
#Sfiha sales have a few outliers in a certain month, sales month over month look stable and follows temperature trend
#Plotting boxplots for snack/month
ggplot(df , aes(factor(month), snack)) +
geom_boxplot(aes(fill =factor(month))) +
theme(legend.title=element_text(family="Times",size=20),
legend.text=element_text(family="Times",face ="italic",size=15),
plot.title=element_text(family="Times", face="bold", size=20),
axis.title.x=element_text(family="Times", face="bold", size=12),
axis.title.y=element_text(family="Times", face="bold", size=12)) +
xlab("Month") +
ylab("Amount Sold (by Month)") +
theme(legend.position = "none") +
ggtitle("Sales of Snack (by Month of the Year)")
#Plotting boxplots for pastas/month
ggplot(df , aes(factor(month), pastas)) +
geom_boxplot(aes(fill =factor(month))) +
theme(legend.title=element_text(family="Times",size=20),
legend.text=element_text(family="Times",face ="italic",size=15),
plot.title=element_text(family="Times", face="bold", size=20),
axis.title.x=element_text(family="Times", face="bold", size=12),
axis.title.y=element_text(family="Times", face="bold", size=12)) +
xlab("Month") +
ylab("Amount Sold (by Month)") +
theme(legend.position = "none") +
ggtitle("Sales of Pastas (by Month of the Year)")
#Plotting boxplots for dishes/month
ggplot(df , aes(factor(month), dishes)) +
geom_boxplot(aes(fill =factor(month))) +
theme(legend.title=element_text(family="Times",size=20),
legend.text=element_text(family="Times",face ="italic",size=15),
plot.title=element_text(family="Times", face="bold", size=20),
axis.title.x=element_text(family="Times", face="bold", size=12),
axis.title.y=element_text(family="Times", face="bold", size=12)) +
xlab("Month") +
ylab("Amount Sold (by Month)") +
theme(legend.position = "none") +
ggtitle("Sales of Dishes (by Month of the Year)")
#Plotting boxplots for savory/month
ggplot(df , aes(factor(month), savory)) +
geom_boxplot(aes(fill =factor(month))) +
theme(legend.title=element_text(family="Times",size=20),
legend.text=element_text(family="Times",face ="italic",size=15),
plot.title=element_text(family="Times", face="bold", size=20),
axis.title.x=element_text(family="Times", face="bold", size=12),
axis.title.y=element_text(family="Times", face="bold", size=12)) +
xlab("Month") +
ylab("Amount Sold (by Month)") +
theme(legend.position = "none") +
ggtitle("Sales of Savory (by Month of the Year)")
# Seems like savory follows tem. trend as well
#Plotting boxplots for salads/month
ggplot(df , aes(factor(month), salads)) +
geom_boxplot(aes(fill =factor(month))) +
theme(legend.title=element_text(family="Times",size=20),
legend.text=element_text(family="Times",face ="italic",size=15),
plot.title=element_text(family="Times", face="bold", size=20),
axis.title.x=element_text(family="Times", face="bold", size=12),
axis.title.y=element_text(family="Times", face="bold", size=12)) +
xlab("Month") +
ylab("Amount Sold (by Month)") +
theme(legend.position = "none") +
ggtitle("Sales of Salads (by Month of the Year)")
#Sales of salads are declining month over month.
#Converting diasemana to numbers
df$day_number <- recode(df$diasemana,
"SUN"= 0,
"MON"= 1,
"TUE"= 2,
"WED"= 3,
"TUR"= 4,
"FRI"= 5,
"SAT"= 6)
######## removing outliers ########
####### desserts ########
desserts_c <- df$desserts
boxplot(desserts_c)
qnt <- quantile(desserts_c, probs=c(.25, .75), na.rm = T)
caps <- quantile(desserts_c, probs=c(.05, .95), na.rm = T)
H <- 1.5 * IQR(desserts_c, na.rm = T)
desserts_c[desserts_c > (qnt[1] + H)] <- caps[1]
desserts_c[desserts_c < (qnt[2] - H)] <- caps[2]
df$desserts_c <- desserts_c
ggplot(df , aes(factor(month), desserts_c)) +
geom_boxplot(aes(fill =factor(month))) +
theme(legend.title=element_text(family="Times",size=20),
legend.text=element_text(family="Times",face ="italic",size=15),
plot.title=element_text(family="Times", face="bold", size=20),
axis.title.x=element_text(family="Times", face="bold", size=12),
axis.title.y=element_text(family="Times", face="bold", size=12)) +
xlab("Month") +
ylab("Amount Sold (by Month)") +
ggtitle("Sales of Salads (by Month of the Year)")
#Outliesr removed from desserts
####### pizzas ########
# We need to know why pizza sales spike before we treat outliers
####### beverage #######
beverage_c <- df$beverage
boxplot(beverage_c)
qnt <- quantile(beverage_c, probs=c(.25, .75), na.rm = T)
caps <- quantile(beverage_c, probs=c(.05, .95), na.rm = T)
H <- 1.5 * IQR(beverage_c, na.rm = T)
beverage_c[beverage_c > (qnt[1] + H)] <- caps[1]
beverage_c[beverage_c < (qnt[2] - H)] <- caps[2]
boxplot(beverage_c)
df$beverage_c <- beverage_c
####### sfiha #######
sfiha_c <- df$sfiha
boxplot(sfiha_c)
min(sfiha_c)
sfiha_c[sfiha_c ==  5164] <- 26774.38
sfiha_c[sfiha_c ==  7892] <- 26774.38
qnt <- quantile(sfiha_c, probs=c(.25, .75), na.rm = T)
caps <- quantile(sfiha_c, probs=c(.05, .95), na.rm = T)
head(qnt)
head(caps)
H <- 1.5 * IQR(sfiha_c, na.rm = T)
sfiha_c[sfiha_c > (qnt[1] + H)] <- caps[1]
sfiha_c[sfiha_c < (qnt[2] - H)] <- caps[2]
boxplot(sfiha_c)
#Plotting boxplots for sfiha/month
ggplot(df , aes(factor(month), sfiha)) +
geom_boxplot(aes(fill =factor(month))) +
theme(legend.title=element_text(family="Times",size=20),
legend.text=element_text(family="Times",face ="italic",size=15),
plot.title=element_text(family="Times", face="bold", size=20),
axis.title.x=element_text(family="Times", face="bold", size=12),
axis.title.y=element_text(family="Times", face="bold", size=12)) +
xlab("Month") +
ylab("Amount Sold (by Month)") +
ggtitle("Sales of Sfiha (by Month of the Year)")
df$sfiha_c <- sfiha_c
#Outliers removed from sfiha
####### pastas #######
pastas_c <- df$pastas
boxplot(pastas_c)
qnt <- quantile(pastas_c, probs=c(.25, .75), na.rm = T)
caps <- quantile(pastas_c, probs=c(.05, .95), na.rm = T)
H <- 2 * IQR(pastas_c, na.rm = T)
pastas_c[pastas_c > (qnt[1] + H)] <- caps[1]
pastas_c[pastas_c < (qnt[2] - H)] <- caps[2]
boxplot(pastas_c)
ggplot(df , aes(factor(month), pastas_c)) +
geom_boxplot(aes(fill =factor(month))) +
theme(legend.title=element_text(family="Times",size=20),
legend.text=element_text(family="Times",face ="italic",size=15),
plot.title=element_text(family="Times", face="bold", size=20),
axis.title.x=element_text(family="Times", face="bold", size=12),
axis.title.y=element_text(family="Times", face="bold", size=12)) +
xlab("Month") +
ylab("Amount Sold (by Month)") +
ggtitle("Sales of Sfiha (by Month of the Year)")
df$pastas_c <- pastas_c
######## models ########
# Splitting data train and test %80 and %20
date.copy <- df
data.split <- createDataPartition(date.copy$total, p=0.8, list = F)
train <- date.copy[data.split, ]
test <- date.copy[-data.split, ]
dim(train)
dim(test)
train.copy <- train
test.copy <- test
########  Decision Tree Model ########
# Let's predict sfiha_c
set.seed(2020)
decision.tree.model <- rpart(sfiha_c ~ precipitac + tempmax + tempmin + tempmed + umidade + insolacao
+ month + day_number, data=train.copy, control = list(cp = 0, xval = 10))
# Plotting the Decision
rpart.plot(decision.tree.model)
#plotcp(decision.tree.model)
# Using our model to predict
predict.decision.tree.model <- predict(decision.tree.model, test.copy)
# Calculating RMSE
RMSE <- RMSE(pred = predict.decision.tree.model, obs = test.copy$sfiha_c)
RMSE/mean(sfiha_c)*100
#Let's predict Desserts
decision.tree.model <- rpart(desserts_c ~ precipitac + tempmax + tempmin + tempmed + umidade + insolacao
+ month + day_number, data=train.copy)
rpart.plot(decision.tree.model)
predict.decision.tree.model <- predict(decision.tree.model, test.copy)
RMSE <- RMSE(pred = predict.decision.tree.model, obs = test.copy$desserts_c)
RMSE/mean(desserts_c)*100
#Let's predict Beverage
decision.tree.model <- rpart(beverage_c ~ precipitac + tempmax + tempmin + tempmed + umidade + insolacao
+ month + day_number, data=train.copy)
rpart.plot(decision.tree.model)
predict.decision.tree.model <- predict(decision.tree.model, test.copy)
RMSE <- RMSE(pred = predict.decision.tree.model, obs = test.copy$beverage_c)
RMSE/mean(beverage_c)*100
#Let's predict Snack
decision.tree.model <- rpart(snack ~ precipitac + tempmax + tempmin + tempmed + umidade + insolacao
+ month + day_number, data=train.copy)
rpart.plot(decision.tree.model)
#plotcp(decision.tree.model)
predict.decision.tree.model <- predict(decision.tree.model, test.copy)
RMSE <- RMSE(pred = predict.decision.tree.model, obs = test.copy$snack)
RMSE/mean(snack)*100
#Let's predict Pastas
decision.tree.model <- rpart(pastas ~ precipitac + tempmax + tempmin + tempmed + umidade + insolacao
+ month + day_number, data=train.copy)
rpart.plot(decision.tree.model)
#plotcp(decision.tree.model)
predict.decision.tree.model <- predict(decision.tree.model, test.copy)
RMSE <- RMSE(pred = predict.decision.tree.model, obs = test.copy$pastas)
RMSE/mean(pastas)*100
#Let's predict Savory
decision.tree.model <- rpart(savory ~ precipitac + tempmax + tempmin + tempmed + umidade + insolacao
+ month + day_number, data=train.copy)
rpart.plot(decision.tree.model)
#plotcp(decision.tree.model)
predict.decision.tree.model <- predict(decision.tree.model, test.copy)
RMSE <- RMSE(pred = predict.decision.tree.model, obs = test.copy$savory)
RMSE/mean(savory)*100
#Let's predict Salads
decision.tree.model <- rpart(salads ~ precipitac + tempmax + tempmin + tempmed + umidade + insolacao
+ month + day_number, data=train.copy)
rpart.plot(decision.tree.model)
#plotcp(decision.tree.model)
predict.decision.tree.model <- predict(decision.tree.model, test.copy)
RMSE <- RMSE(pred = predict.decision.tree.model, obs = test.copy$salads)
RMSE/mean(salads)*100
#Let's predict Dishes
decision.tree.model <- rpart(dishes ~ precipitac + tempmax + tempmin + tempmed + umidade + insolacao
+ month + day_number, data=train.copy)
rpart.plot(decision.tree.model)
#plotcp(decision.tree.model)
predict.decision.tree.model <- predict(decision.tree.model, test.copy)
RMSE <- RMSE(pred = predict.decision.tree.model, obs = test.copy$dishes)
RMSE/mean(dishes)*100
######## Bagging Model ########
set.seed(2020)
# Let's predict beverages
cross.validation <- trainControl(method='cv', number=10)
bagged_cv <- train(
beverage_c ~ precipitac + tempmax + tempmin + tempmed + umidade + insolacao + month + day_number,
data = train.copy,
method = "treebag",
trControl = cross.validation,
importance = TRUE
)
bagged_cv
#Checking importance of features
plot(varImp(bagged_cv), 8)
# It seems like precipitation does not impact sales of beverages
predict.bagged <- predict(bagged_cv, test.copy)
RMSE <- RMSE(predict.bagged, test.copy$beverage_c)
RMSE/mean(beverage_c)*100
# Let's predict sfiha
cross.validation <- trainControl(method='cv', number=10)
bagged_cv <- train(
sfiha_c ~ precipitac + tempmax + tempmin + tempmed + umidade + insolacao + month + day_number,
data = train.copy,
method = "treebag",
trControl = cross.validation,
importance = TRUE
)
predict.bagged <- predict(bagged_cv, test.copy)
RMSE <- RMSE(predict.bagged, test.copy$sfiha_c)
RMSE/mean(sfiha_c)*100
######## Random Forest Model ########
set.seed(2020)
library(randomForest)
random.forest.model <- randomForest(sfiha_c ~ precipitac + tempmax + tempmin
+ tempmed + umidade + insolacao + day_number + month, data = train.copy)
random.forest.model
which.min(random.forest.model$mse)
sqrt(random.forest.model$mse[which.min(random.forest.model$mse)])
predict.random.forest <- predict(random.forest.model, data = test.copy)
RMSE <- RMSE(predict.random.forest, test.copy$sfiha_c)
RMSE/mean(sfiha_c)*100
shiny::runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
runApp('C:/Curso-ML/Assignment-1')
shiny::runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
shiny::runApp('C:/Curso-ML/Assignment-3')
runApp()
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
runApp('C:/Curso-ML/Assignment-3')
data2x <- read.csv("/Curso-ML/Assignment-1/result-06.csv")
print(data2x)
runApp('C:/Curso-ML/Assignment-3')
summary(fit)
##  library(xlsx)
library(stringr)
##library(inum)library(TH.data)library(multcomp)library(matrixStats)library(survival)library(coin)library(sandwich)library(libcoin)library(strucchange)
##library(Formula)
library(FSelect)
library(rpart.plot)
library(caret)
library(rpart)
library(rpart.plot)
library(data.tree)
library(party)
library(partykit)
library(caTools)
library(ElemStatLearn)
library(dplyr)
setwd("/AI/Energia4/")
data2 <- read.csv("dia-re.csv") ## Items
str(data2)
##data2$typephone <- as.factor(data1$typephone, levels = c(0, 1), labels = c('Mobile', 'landline'))
##prop.table(table(data2$range))
str(data2)
## select the meaninful colunms for the analysis
data0 <- select(data2,regiao,precipitac,ttmax,ttmin,sol,ttmed,ttumid, ena, pld, range) ##, ,
##data0 <- mutate(data2, spoke = factor(spoke)) ##, rescen = factor(rescen), tel_o = factor(tel_o)
data_sample = sample.split(data0$range ,SplitRatio=0.80) ##here we separate the file to be the nodes
data1 = subset(data0,data_sample==TRUE)  ##trainning data
data5 = subset(data0,data_sample==FALSE) ##test data
head(data1)
str(data1)
library(rpart)
library(rpart.plot)
dim(data1)
fit1 <- rpart(range~regiao+precipitac+ttmax+ttmin+sol+ttmed+ttumid+ena, data = data1)
fit<- ctree(range~regiao+precipitac+ttmax+ttmin+sol+ttmed+ttumid+ena, data = data1)
predicao <- predict(fit, data5)
print(fit)
rpart.plot(fit1, box.palette = "RdBu", shadow.col="gray", nn=TRUE)
confusionMatrix(predicao, data5$range)
prp(fit1)
summary(fit)
##plot(fit, type = "simple")
png("fit.png", res=80, height=800, width=3000)
print(data1)
##plot(fit, main = "Classificacao de Range",     type = "simple",     gp = gpar(fontsize = 6),     margins = NULL)
##dev.off()
runApp('C:/Curso-ML/Assignment-3')
